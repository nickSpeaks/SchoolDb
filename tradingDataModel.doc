create database tradingDB;
use tradingDB;

CREATE TABLE Trader (
  traderId INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  firstName VARCHAR(50) NOT NULL,
  lastName VARCHAR(50) NOT NULL,
  emailAddress VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE Stock (
  stockId INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  symbol VARCHAR(10) NOT NULL UNIQUE,
  companyName VARCHAR(255) NOT NULL,
  currentPrice DECIMAL(10,2) NOT NULL
);

# Many-to-Many: The Transaction table clearly shows the many-to-many 
# relationship between traders and stocks. A single trader can have 
# many transactions, and a single stock can be involved in many 
# transactions with different traders. The foreign keys enforce 
# this by ensuring each transaction references a valid trader and stock

CREATE TABLE Transaction (
  transactionId INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  traderId INT UNSIGNED NOT NULL,
  stockId INT UNSIGNED NOT NULL,
  transactionDate DATETIME NOT NULL,
  sharePrice DECIMAL(10,2) NOT NULL,  -- Price at purchase/sale
  quantity INT NOT NULL,  -- Positive for buy, negative for sell
  transactionType ENUM('BUY', 'SELL') NOT NULL,
  FOREIGN KEY (traderId) REFERENCES Trader(traderId),
  FOREIGN KEY (stockId) REFERENCES Stock(stockId)
);

INSERT INTO Trader (firstName, lastName, emailAddress)
VALUES ('John', 'Doe', 'johndoe@trade.com'),
       ('Jane', 'Smith', 'janesmith@trade.com');

INSERT INTO Stock (symbol, companyName, currentPrice)
VALUES ('AAPL', 'Apple Inc.', 150.25),
       ('GOOG', 'Alphabet Inc.', 2800.00),
       ('TSLA', 'Tesla Inc.', 750.50);

INSERT INTO Transaction (traderId, stockId, transactionDate, sharePrice, quantity, transactionType)
VALUES (1, 1, '2024-06-20 10:00:00', 145.75, 100, 'BUY'),
       (2, 2, '2024-06-21 14:30:00', 2780.25, 5, 'BUY'),
       (1, 3, '2024-06-25 12:15:00', 720.00, 25, 'SELL');

-- Find all transactions for a specific trader (using foreign key)
SELECT t.*, s.symbol, s.companyName
FROM Transaction t
INNER JOIN Trader tr ON t.traderId = tr.traderId  -- Join with Trader table
INNER JOIN Stock s ON t.stockId = s.stockId  -- Join with Stock table
WHERE tr.firstName = 'John';

-- Get the total number of shares a trader bought or sold for a specific stock
SELECT tr.firstName, tr.lastName, s.symbol, SUM(quantity) AS total_shares
FROM Transaction t
INNER JOIN Trader tr ON t.traderId = tr.traderId
INNER JOIN Stock s ON t.stockId = s.stockId
GROUP BY tr.traderId, s.symbol;

